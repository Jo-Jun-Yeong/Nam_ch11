/*#HashSet
 * > 대표적인 Set인터페이스를 구현하는 클래스
 * 	   	-HashSet에 add()하기 전엔 기존 객체가 잇는지 확인 할 피룡가 있다.
 * 	     같은 객체가 없으면 저장하고, 있으면 저장하징 ㅏㄴㅎ는다.
 * 		-add()는 저장할 객체의 equals()와 hashCode()를 호출한다.
 * 		 equals와 hashCode가  오버라이딩 되어 있어야 한다.
 * 
 *#TreeSet
 * > 범위검색과 정렬에 사용된다.
 * > HashSet보다 데이터의 추가, 삭제에 시간이 오래 걸린다.
 *  - 이진 탐색 트리(binary search tree)로  구현범위탐색과 정렬에 유리하다.
 *  	*이진트리는 모든 노드가  최대 2개(0~2)하위노드를 갖음
 *  	*각 요소가 나무형태로 연결되어있는 모습(LinkedList의 변형)
 *  	*부모보다 작으면 왼쪽노드 크면 오른쪽 노드에 저장한다.
 *  	*데이터가 많아 질수록 추가, 삭제에 걸리는 시간이 많아진다(=비교횟수가 증가)
 *  
 *  
 * */
public class ch11_56_Summary_3 {

}
